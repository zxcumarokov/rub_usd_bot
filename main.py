import os  # noqa E402
import requests
from bs4 import BeautifulSoup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Bot, Dispatcher, executor, types  # mid
from aiogram.types import InlineKeyboardButton
from aiogram.types import InlineKeyboardMarkup
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from sqlalchemy import BigInteger
from sqlalchemy import delete
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from sqlalchemy import Column, Integer, String
from sqlalchemy.orm import declarative_base
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

from sqlalchemy import Column, Integer, String
from sqlalchemy.orm import declarative_base
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

from config import TOKEN  # noqa E402
from config import db_url  # noqa E402

# cb = CallbackData("ikb", "action")  # cb filter
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
user_id = 0  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
language = None

# –°–ª–æ–≤–∞—Ä—å —Å —Ç–µ–∫—Å—Ç–∞–º–∏ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
button_texts = {
    "ru": {
        "usd_to_rub": "–î–æ–ª–ª–∞—Ä—ã –≤ —Ä—É–±–ª–∏",
        "rub_to_usd": "–†—É–±–ª–∏ –≤ –¥–æ–ª–ª–∞—Ä—ã",
    },
    "en": {
        "usd_to_rub": "Dollars to Rubles",
        "rub_to_usd": "Rubles to Dollars",
    },
}


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞

# –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Form(StatesGroup):
    waiting_for_usd = State()
    waiting_for_rub = State()


def is_float(string: str) -> bool:  # noqa E501
    string = string.replace(",", ".")
    try:
        float(string)
        return True
    except ValueError:
        return False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–µ
async def update_exchange_rate() -> float | None:
    url = "https://www.google.com/finance/quote/USD-RUB?sa=X&ved=2ahUKEwjoxe30pcCBAxW3AhAIHfMmAxYQmY0JegQIDRAr"
    headers = {
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36"
        # noqa E501
    }
    full_page = requests.get(url, headers=headers)
    soup = BeautifulSoup(full_page.content, "html.parser")
    convert = soup.findAll("div", {"class": "YMlKec fxKbKc"})

    if convert:
        return float(convert[0].text.replace(",", "."))
    else:
        return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_keyboard() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–î–æ–ª–ª–∞—Ä—ã –≤ —Ä—É–±–ª–∏", callback_data="usd_to_rub"))
    keyboard.add(InlineKeyboardButton("–†—É–±–ª–∏ –≤ –¥–æ–ª–ª–∞—Ä—ã", callback_data="rub_to_usd"))

    return keyboard


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
def get_keyboard(language):
    keyboard = InlineKeyboardMarkup()
    for button_data, button_text in button_texts.get(language, {}).items():
        keyboard.add(InlineKeyboardButton(button_text, callback_data=button_data))
    return keyboard


# –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    existing_user = session.query(Language).filter_by(user_id=user_id).first()
    if existing_user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—ã–±–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏
        await message.answer(get_operation_message(existing_user.language),
                             reply_markup=get_keyboard(existing_user.language))
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="set_language_ru"))
        markup.add(InlineKeyboardButton("üá∫üá∏ English", callback_data="set_language_en"))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=markup)


def get_operation_message(language):
    if language == "ru":
        return "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:"
    elif language == "en":
        return "Choose an operation:"
    else:
        return "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é / Choose an operation:"


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@dp.callback_query_handler(lambda c: c.data in ["set_language_ru", "set_language_en"])
async def set_user_language(callback_query: types.CallbackQuery):
    global language  # –û–±—ä—è–≤–ª—è–µ–º, —á—Ç–æ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    await bot.answer_callback_query(callback_query.id)
    user_id = callback_query.from_user.id
    selected_language = callback_query.data.replace("set_language_", "")

    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ languages

    new_language = Language(user_id=user_id, language=selected_language)
    session.add(new_language)
    session.commit()

    # –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
    await bot.send_message(user_id, get_operation_message(selected_language),
                           reply_markup=get_keyboard(selected_language))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /language
@dp.message_handler(commands=["language"])
async def set_language(message: types.Message):
    global language  # –û–±—ä—è–≤–ª—è–µ–º, —á—Ç–æ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="set_language_ru"))
    markup.add(InlineKeyboardButton("üá∫üá∏ English", callback_data="set_language_en"))

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=markup)


def get_user_language(user_id):
    user_language = session.query(Language).filter_by(user_id=user_id).first()
    return user_language.language if user_language else "en"  # –í–µ—Ä–Ω—É—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–ª–ª–∞—Ä—ã –≤ —Ä—É–±–ª–∏"
@dp.callback_query_handler(lambda c: (c.data == "usd_to_rub"))
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await Form.waiting_for_usd.set()
    user_id = callback_query.from_user.id
    language = get_user_language(user_id)  # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if language == "ru":
        await bot.send_message(
            user_id, f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–ª–∞—Ä–æ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:"
        )
    elif language == "en":
        await bot.send_message(
            user_id, f"Enter the amount of dollars to convert:"
        )


@dp.callback_query_handler(lambda c: c.data in ["set_language_ru", "set_language_en"])
async def set_user_language(callback_query: types.CallbackQuery, session=None):
    await bot.answer_callback_query(callback_query.id)
    user_id = callback_query.from_user.id
    selected_language = callback_query.data.replace("set_language_", "")

    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ languages
    new_language = Language(user_id=user_id, language=selected_language)
    session.add(new_language)
    session.commit()

    await bot.send_message(user_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —è–∑—ã–∫: {selected_language}")


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "—Ä—É–±–ª–∏ –≤ –¥–æ–ª–ª–∞—Ä—ã" —Å –æ—Ç–≤–µ—Ç–æ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–æ–≥–æ —è–∑—ã–∫–∞
@dp.callback_query_handler(lambda c: (c.data == "rub_to_usd"))
async def process_callback_button2(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await Form.waiting_for_rub.set()
    user_id = callback_query.from_user.id
    language = get_user_language(user_id)
    if language == "ru":
        await bot.send_message(
            user_id, f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–±–ª–µ–π –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –¥–æ–ª–ª–∞—Ä—ã:"
        )
    elif language == "en":
        await bot.send_message(
            user_id, f"Enter the amount of rubles to convert to dollars:"
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä—É–±–ª–µ–π
@dp.message_handler(lambda message: is_float(message.text), state=Form.waiting_for_rub)
async def process_rub_amount(message: types.Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id
    language = get_user_language(user_id)

    rub_amount = float(message.text.replace(",", "."))
    rate = await update_exchange_rate()
    if not rate:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –æ–±–º–µ–Ω–∞")
        return

    usd = rub_amount / rate
    usd = round(usd, 2)

    if language == "ru":
        await bot.send_message(
            user_id, f"{rub_amount} —Ä—É–±–ª–µ–π —Ä–∞–≤–Ω–æ {usd} –¥–æ–ª–ª–∞—Ä–æ–≤"
        )
    elif language == "en":
        await bot.send_message(
            user_id, f"{rub_amount} rubles is equal to {usd} dollars"
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ–ª–ª–∞—Ä–æ–≤
@dp.message_handler(lambda message: is_float(message.text), state=Form.waiting_for_usd)
async def process_usd_amount(message: types.Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id
    language = get_user_language(user_id)

    usd_amount = float(message.text.replace(",", "."))
    rate = await update_exchange_rate()
    if not rate:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –æ–±–º–µ–Ω–∞")
        return

    rub = usd_amount * rate
    rub = round(rub, 2)

    if language == "ru":
        await bot.send_message(
            user_id, f"{usd_amount} –¥–æ–ª–ª–∞—Ä–æ–≤ —Ä–∞–≤–Ω–æ {rub} —Ä—É–±–ª–µ–π"
        )
    elif language == "en":
        await bot.send_message(
            user_id, f"{usd_amount} dollars is equal to {rub} rubles"
        )


################DB#####################

Base = declarative_base()


class Language(Base):
    __tablename__ = 'languages'

    id = Column(Integer, primary_key=True)
    user_id = Column(BigInteger, nullable=False)  # –ò–∑–º–µ–Ω—è–µ–º —Ç–∏–ø –Ω–∞ BigInteger
    language = Column(String(10), nullable=False)

    def __init__(self, user_id, language):
        self.user_id = user_id
        self.language = language


# –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
engine = create_engine(db_url,
                       echo=True)  # –ò–ª–∏ –¥—Ä—É–≥–æ–π URI –¥–ª—è —Ç–≤–æ–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
Base.metadata.create_all(engine)

# –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
Session = sessionmaker(bind=engine)
session = Session()


def delete_all_data(session):
    try:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Language
        delete_statement = delete(Language)
        session.execute(delete_statement)
        session.commit()
        print("–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Language.")
    except Exception as e:
        session.rollback()
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    finally:
        session.close()


# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# delete_all_data(session)
# –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã languages
languages = session.query(Language).all()
for language in languages:
    print(f'User ID: {language.user_id}, Language: {language.language}')

# –ù–µ –∑–∞–±—É–¥—å –∑–∞–∫—Ä—ã—Ç—å —Å–µ—Å—Å–∏—é –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
session.close()

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
